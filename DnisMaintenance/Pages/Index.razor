@page "/"
@inject HttpClient Http

<PageTitle>DNIS Maintenance</PageTitle>

<div style="margin-left: 20px; margin-top: 15px">
    <h4>WDE CallDataWindow Maintenance Tool</h4>
</div>

<div>
    <div style="margin-top: 10px">
        <FluentSelect Id="selectRegion"
                      Position="SelectPosition.Below"
                      Items="@this._regionOptions"
                      OptionText="@(r => r.Text)"
                      OptionValue="@(r => r.Value)"
                      ValueChanged="@( (string selectedRegion) => OnChangeSelectedRegion(selectedRegion) )" />
    </div>

    <div style="margin-top: 10px">
        <FluentSelect Id="selectDnis"
                      Disabled="@this._disableDNISSelect"
                      Position="SelectPosition.Below"
                      Items="@this._dnisOptions"
                      OptionText="@(i => i.Text)"
                      OptionValue="@(i => i.Value)"
                      ValueChanged="@( (string selectedDNIS) => OnChangeSelectedDnis(selectedDNIS) )" />
        <FluentTextArea Style="width: 100%; margin-top: 10px" Value="@this._dnisScript">Script</FluentTextArea>
    </div>

    <div style="margin-top: 10px">
        <FluentDataGrid Id="gridDnis" RowsData=@this._kvpList GridTemplateColumns="1fr 1fr 0.4fr 0.2fr" TGridItem=KvpList>
            <TemplateColumn Title="Friendly Name">
                <FluentTextField Style="width: 100%; justify-content: left" @bind-Value="@context.FriendlyName" />
            </TemplateColumn>
            <TemplateColumn Title="Genesys UserData Key">
                <FluentTextField Style="width: 100%; justify-content: left" @bind-Value="@context.GenesysKey" />
            </TemplateColumn>
            <TemplateColumn Title="Is this an Event Attribute?">
                <FluentRadioGroup>
                    @if( context.UseAttribute )
                    {
                        <FluentRadio Value="checked" Checked="true">Yes</FluentRadio>
                        <FluentRadio Checked="false">No</FluentRadio>
                    }
                    else
                    {
                        <FluentRadio Checked="false">Yes</FluentRadio>
                        <FluentRadio Value="checked" Checked="true">No</FluentRadio>
                    }
                </FluentRadioGroup>
            </TemplateColumn>
            <TemplateColumn Title="View Order">
                <FluentButton Type="ButtonType.Button" Style="width: 10%; justify-content: center" @onclick="@(() => OnClickDownArrow(context))">
                    <FluentIcon Name="@FluentIcons.ArrowDown" Size="@IconSize.Size16" />
                </FluentButton>
                <FluentButton Type="ButtonType.Button" Style="width: 10%; justify-content: center" @onclick="@(() => OnClickUpArrow(context))">
                    <FluentIcon Name="@FluentIcons.ArrowUp" Size="@IconSize.Size16" />
                </FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
    </div>
</div>

@code
{
    private List<Option<string>> _regionOptions = new List<Option<string>>();
    private List<Option<string>> _dnisOptions = new List<Option<string>>();
    private CallDataWindowConfiguration? _dnisConfigurations;
    private IQueryable<KvpList>? _kvpList;
    private bool _disableDNISSelect = true;
    private const string _regionPlaceHolder = "Please select a Region";
    private const string _dnisPlaceHolder = "Please select a DNIS";
    private string _dnisScript;


    protected override async Task OnInitializedAsync()
    {
        List<Region> regions = await Http.GetFromJsonAsync<List<Region>>( "sample-data/regions.json" ).ConfigureAwait( false );
        if( regions is null )
        {
            return;
        }
        this._regionOptions.Clear();
        this._regionOptions.Add( new Option<string> { Value = $"", Text = $"{_regionPlaceHolder}" } );
        foreach( Region region in regions )
        {
            //  This goes to a combobox
            this._regionOptions.Add( new Option<string> { Value = $"{region.Code}", Text = $"{region.Description}" } );
        }
    }

    protected async Task OnChangeSelectedRegion( string selectedRegion )
    {
        //  TODO:  What if user changes the region?  Need to clear out existing Lists.
        if( string.IsNullOrEmpty( selectedRegion ) == true )
        {
            return;
        }
        string rawJson = await Http.GetStringAsync( $"sample-data/{selectedRegion}_DNIS_Configuration.json" ).ConfigureAwait( false );
        this._dnisConfigurations = CallDataWindowConfiguration.FromJson( rawJson );

        this._dnisOptions.Clear();
        this._dnisOptions.Add( new Option<string> { Value = $"", Text = $"{_dnisPlaceHolder}" } );
        foreach( KeyValuePair<string, DnisList> item in this._dnisConfigurations.DnisList[0] )
        {
            //  This goes to a combobox
            this._dnisOptions.Add( new Option<string> { Value = $"{item.Key}", Text = $"{item.Key}" } );
        }
        this._disableDNISSelect = false;
    }

    protected void OnChangeSelectedDnis( string selectedDNIS )
    {
        //  TODO:  What if user changes the dnis?  Need to clear out existing Lists.
        if( string.IsNullOrEmpty( selectedDNIS ) == true )
        {
            return;
        }
        bool success = this._dnisConfigurations.DnisList[0].TryGetValue( selectedDNIS, out DnisList item );
        if( success && item is not null )
        {
            this._dnisScript = item.Script;
            this._kvpList = item.KvpList.ToList().AsQueryable();
        }
    }

    protected void OnClickDownArrow( KvpList? row )
    {
        Console.WriteLine( $"Down Arrow Clicked: {row}" );
    }

    protected void OnClickUpArrow( KvpList? row )
    {
        Console.WriteLine( $"Up Arrow Clicked: {row}" );
    }
}