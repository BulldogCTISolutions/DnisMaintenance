@page "/"
@inject HttpClient Http

<PageTitle>DNIS Maintenance</PageTitle>

<div style="margin-left: 20px;">
    <div style="margin-top: 10px;">
        <FluentSelect Id="selectRegion"
                      Position="SelectPosition.Below"
                      Items="@this._regionOptions"
                      OptionText="@(r => r.Text)"
                      OptionValue="@(r => r.Value)"
                      ValueChanged="@( (string selectedRegion) => OnChangeSelectedRegion(selectedRegion) )" />
    </div>

    <div style="margin-top: 10px">
        <FluentSelect Id="selectDnis"
                      Disabled="@this._disableDNISSelect"
                      Position="SelectPosition.Below"
                      Items="@this._dnisOptions"
                      OptionText="@(i => i.Text)"
                      OptionValue="@(i => i.Value)"
                      ValueChanged="@( (string selectedDNIS) => OnChangeSelectedDnis(selectedDNIS) )" />
        <FluentTextArea Style="width: 100%; margin-top: 10px" Value="@this._dnisScript">Script</FluentTextArea>
    </div>

    @*    RowsData=@this._gridKvpList
    *@    <div style="margin-top: 10px">
        <FluentDataGrid @ref="GridOfKvps"
                        RowsDataProvider="this._gridItemsProvider"
                        GridTemplateColumns="1fr 1fr 0.5fr 0.4fr 0.4fr"
                        TGridItem=KvpList
                        OnRowFocus="(() => this.OnRowFocus())">

            <TemplateColumn Title="Friendly Name" Align="Align.Left">
                <FluentTextField Style="width: 100%;" @bind-Value="@context.FriendlyName" />
            </TemplateColumn>

            <TemplateColumn Title="Genesys UserData Key" Align="Align.Left">
                <FluentTextField Style="width: 100%;" @bind-Value="@context.GenesysKey" />
            </TemplateColumn>

            <TemplateColumn Title="Is this an Event Attribute?" Align="Align.Center">
                <FluentRadioGroup Orientation="Orientation.Horizontal">
                    <FluentRadio Id="radioYes" Value="true" Checked="@context.UseAttribute">Yes</FluentRadio>
                    <FluentRadio Id="radioNo" Value="false" Checked="@(!(context.UseAttribute))">No</FluentRadio>
                </FluentRadioGroup>
            </TemplateColumn>

            <TemplateColumn Title="View Order" Align="Align.Center">
                <FluentButton Type="ButtonType.Button"
                              Style="width: 10%; justify-content: center"
                              Disabled=@(Int32.Parse(context.ViewOrder) == (this._kvpList.Count()))
                              @onclick="@(() => OnClickDownArrow(context))">
                    <FluentIcon Name="@FluentIcons.ArrowDown" Size="@IconSize.Size16" />
                </FluentButton>
                <FluentButton Type="ButtonType.Button"
                              Style="width: 10%; justify-content: center"
                              Disabled=@(Int32.Parse(context.ViewOrder) == 1)
                              @onclick="@(() => OnClickUpArrow(context))">
                    <FluentIcon Name="@FluentIcons.ArrowUp" Size="@IconSize.Size16" />
                </FluentButton>
            </TemplateColumn>

            <TemplateColumn Title="Edit" Align="Align.Center">
                <FluentButton Type="ButtonType.Button"
                              Style="width: 10%; justify-content: center"
                              @onclick="@(() => OnClickAdd(context))">
                    <FluentIcon Name="@FluentIcons.Add" Size="@IconSize.Size16" />
                </FluentButton>
                <FluentButton Type="ButtonType.Button"
                              Style="width: 10%; justify-content: center"
                              @onclick="@(() => OnClickDelete(context))">
                    <FluentIcon Name="@FluentIcons.Delete" Size="@IconSize.Size16" />
                </FluentButton>
            </TemplateColumn>

        </FluentDataGrid>
    </div>

    <div style="margin-left: 10px; margin-top: 50px">
        <FluentButton Type="ButtonType.Submit"
                      Appearance="Appearance.Accent"
                      Disabled="@this._disableButtons"
                      @onclick="@(() => OnClickSave())">
            Save all changes
            <FluentIcon Name="@FluentIcons.Save" Color="Color.FillInverse" Slot="start" Size="@IconSize.Size16" />
        </FluentButton>
        <FluentButton Type="ButtonType.Reset"
                      Appearance="Appearance.Accent"
                      Disabled="@this._disableButtons"
                      @onclick="@(() => OnClickUndo())">
            Undo all changes
            <FluentIcon Name="@FluentIcons.ArrowUndo" Color="Color.FillInverse" Slot="start" Size="@IconSize.Size16" />
        </FluentButton>
    </div>

    <div style="margin-left: 10px; margin-top: 30px">
        <label style="color: red; font-size: medium; white-space: break-spaces"
               for="listBoxKVPs">
            <strong>These are the currently known Genesys Keys.<br />If you are using a value not defined in this list, please ensure that spelling and case-sensitivity are correct.
            </strong>
        </label>
        <FluentListbox Id="listBoxKVPs"
                       TOption="GenesysKVP"
                       Items=@this._genesysKVPs
                       Height="200px"
                       Width="300px"
                       OptionDisabled="@(k => k.Disabled)"
                       OptionSelected="@(k => k.Selected)"
                       OptionValue="@(k => k.Value)"
                       OptionText="@(k => k.Text)"
                       @bind-Value="@this._listboxSelectedValue"
                       @bind-SelectedOption="@this._listboxSelectedItem" />
        <p style="margin-top: 10px;">
            Copy and paste this value into the grid above: @this._listboxSelectedValue
        </p>
    </div>
</div>

@code
{
    private const string _regionPlaceHolder = "Please select a Region";
    private const string _dnisPlaceHolder = "Please select a DNIS";
    private bool _disableDNISSelect = true;
    private bool _disableButtons = true;
    private string _dnisScript;
    private string? _listboxSelectedValue;
    private CallDataWindowConfiguration? _dnisConfigurations;
    private List<KvpList> _kvpList;
    private List<GenesysKVP>? _genesysKVPs;
    private GenesysKVP? _listboxSelectedItem;
    private List<Option<string>> _regionOptions = new List<Option<string>>();
    private List<Option<string>> _dnisOptions = new List<Option<string>>();
    private FluentDataGrid<KvpList>? GridOfKvps { get; set; }
    private FluentRadio radioYes { get; set; }
    private FluentRadio radioNo { get; set; }

    private GridItemsProvider<KvpList> _gridItemsProvider = default!;


    protected override async Task OnInitializedAsync()
    {
        List<Region> regions = await Http.GetFromJsonAsync<List<Region>>( "sample-data/regions.json" ).ConfigureAwait( false );
        if( regions is null )
        {
            return;
        }

        //  This may be a performance hit, but let's sort all the Regions on their description.
        //  Uses Region.CompareTo().
        regions.Sort();
        this._regionOptions.Clear();
        this._regionOptions.Add( new Option<string> { Value = $"", Text = $"{_regionPlaceHolder}" } );
        foreach( Region region in regions )
        {
            //  This goes to a combobox
            this._regionOptions.Add( new Option<string> { Value = $"{region.Code}", Text = $"{region.Description}" } );
        }

        _genesysKVPs = await Http.GetFromJsonAsync<List<GenesysKVP>>( "sample-data/genesys-kvps.json" ).ConfigureAwait( false );
        if( _genesysKVPs is null )
        {
            return;
        }

        //  This may be a performance hit, but let's sort all the KVPs on their display text.
        //  uses GenesysKVP.CompareTo().
        _genesysKVPs.Sort();

        await base.OnInitializedAsync().ConfigureAwait( false );
    }

    protected async Task OnChangeSelectedRegion( string selectedRegion )
    {
        if( string.IsNullOrEmpty( selectedRegion ) == true )
        {
            return;
        }
        string rawJson = await Http.GetStringAsync( $"sample-data/{selectedRegion}_DNIS_Configuration.json" ).ConfigureAwait( false );
        this._dnisConfigurations = CallDataWindowConfiguration.FromJson( rawJson );

        this._dnisOptions.Clear();
        this._dnisOptions.Add( new Option<string> { Value = $"", Text = $"{_dnisPlaceHolder}" } );
        foreach( KeyValuePair<string, DnisList> item in this._dnisConfigurations.DnisList[0] )
        {
            //  This goes to a combobox
            this._dnisOptions.Add( new Option<string> { Value = $"{item.Key}", Text = $"{item.Key}" } );
        }
        this._disableDNISSelect = false;
    }

    protected void OnChangeSelectedDnis( string selectedDNIS )
    {
        if( string.IsNullOrEmpty( selectedDNIS ) == true )
        {
            return;
        }
        bool success = this._dnisConfigurations.DnisList[0].TryGetValue( selectedDNIS, out DnisList item );
        if( success && item is not null )
        {
            this._dnisScript = item.Script;
            this._kvpList = item.KvpList;
            //  Initialize the data provider.
            var gridItemsProviderResult = GridItemsProviderResult.From( _kvpList, _kvpList.Count() );
            _gridItemsProvider = req => ValueTask.FromResult( gridItemsProviderResult );
        }
    }

    protected void OnRowFocus()
    {
        this._disableButtons = false;
    }

    protected void OnClickDownArrow( KvpList? row )
    {
        if( row is null )
        {
            throw new ArgumentNullException( nameof( row ) );
        }

        Console.WriteLine( $"Down Arrow Clicked: {row.ViewOrder}" );
        //  Get the current row id.
        int viewOrderSelectedItem = Int32.Parse( row.ViewOrder );
        KvpList selectedRow = this._kvpList.Where( c => c.ViewOrder.Equals( row.ViewOrder, StringComparison.Ordinal ) ).Single();
        //  Increment to get the next item in KVPList.
        int nextViewOrderItem = viewOrderSelectedItem + 1;
        KvpList nextRow = this._kvpList.Where( c => c.ViewOrder.Equals( nextViewOrderItem.ToString(), StringComparison.Ordinal ) ).Single();
        //  Swap the view orders.
        selectedRow.ViewOrder = nextViewOrderItem.ToString();
        nextRow.ViewOrder = viewOrderSelectedItem.ToString();
        //  Update the kvpList.  (subtract one because Lists are zero-based)
        this._kvpList[viewOrderSelectedItem - 1] = nextRow;
        this._kvpList[nextViewOrderItem - 1] = selectedRow;
        //  Refresh the grid.
        _ = this.RefreshTable();
    }

    protected void OnClickUpArrow( KvpList? row )
    {
        if( row is null )
        {
            throw new ArgumentNullException( nameof( row ) );
        }

        Console.WriteLine( $"Up Arrow Clicked: {row.ViewOrder}" );
        //  Get the current row id.
        int viewOrderSelectedItem = Int32.Parse( row.ViewOrder );
        KvpList selectedRow = this._kvpList.Where( c => c.ViewOrder.Equals( row.ViewOrder, StringComparison.Ordinal ) ).Single();
        //  Increment to get the previous item in KVPList.
        int previousViewOrderItem = viewOrderSelectedItem - 1;
        KvpList previousRow = this._kvpList.Where( c => c.ViewOrder.Equals( previousViewOrderItem.ToString(), StringComparison.Ordinal ) ).Single();
        //  Swap the view orders.
        selectedRow.ViewOrder = previousViewOrderItem.ToString();
        previousRow.ViewOrder = viewOrderSelectedItem.ToString();
        //  Update the kvpList.  (subtract one because Lists are zero-based)
        this._kvpList[viewOrderSelectedItem - 1] = previousRow;
        this._kvpList[previousViewOrderItem - 1] = selectedRow;
        //  Refresh the grid.
        _ = this.RefreshTable();
    }

    protected void OnClickAdd( KvpList? row )
    {
        if( row is null )
        {
            throw new ArgumentNullException( nameof( row ) );
        }

        Console.WriteLine( $"Add below row: {row.ViewOrder}" );
    }

    protected void OnClickDelete( KvpList? row )
    {
        if( row is null )
        {
            throw new ArgumentNullException( nameof( row ) );
        }

        Console.WriteLine( $"Delete row: {row.ViewOrder}" );
    }

    private async Task RefreshTable()
    {
        await GridOfKvps?.RefreshDataAsync();
    }

    protected void OnClickSave()
    {
        //  Commit grid to file.
        Console.WriteLine( $"Save" );
    }

    protected void OnClickUndo()
    {
        //  Refresh grid from file.
        Console.WriteLine( $"Undo" );
    }
}
